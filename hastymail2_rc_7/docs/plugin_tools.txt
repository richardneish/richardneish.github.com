TOOLS OVERVIEW

    The tools object provides a wide array of features to the plugin system.
    It can be used to perform Hastymail related functions like send a user
    a notice with the notification system or save/retrieve user settings.
    It also contains several methods intended to make plugin writing more
    convinient and secure. The tools object is only instantiated if at least
    one plugin is activated. It is availble to plugins from any plugin function
    or file as an argument. Some methods are designed to be called from certain hooks,
    while others ca be called from any type of hook. There are 2 types of hooks,
    work hooks and display hooks, and one special hook called the "page hook".
    The tools object can be used from any function associated with a
    hook. The following list defines all the tools methods available to
    plugins, a description of how to use the method, as well as from which
    hook types it is applicable.

TOOLS METHODS

  $tools->add_to_store($name, $value);

        Descritption:
            Store a variable called $name with a value of $value in the data store.
            Part of a simple way to store vales to pass between work hooks to display
            hooks. This can also be used to pass information from the url_action
            function to the print function of a page hook. Data in the store is
            lost when page execution ends.

        Hook compatibility:
            Can be used anywhere but was designed to by called from a work hook
            or the url_action function of a page hook.


  $tools->remove_from_store($name);

        Description:
            Removes the variable named $name from the data store. All data in the
            store is erased when the page ends so this function is net really needed
            unless you have a requirement to manually remove something that was set
            earlier.

        Hook compatibility:
            This method can be used from any hook function.


  $tools->get_from_store($name);

        Description:
            Returns the value for the variable $name if its being held in the store.
            if no varible with the specified name is found it returns false.

        Hook compatibility:
            Can be used from any hook function, however the data requested must already
            have been setup in the store. Work hooks run before display hooks so this is
            usaully used to retrieve data in a display hook function that was setup by a
            work hook. Also could be used to pass data between work hooks or between the
            url_action and print functions of a page hook.


  $tools->decode_mail_field($string);

        Description:
            Decodes a mail header entity of the form =?<charset>?<encoding>?0ASDF=?=
            $string can contain multiple entities. It will be returned with
            entities replaced with their decoded versions.

        Hook compatibility:
            Can be used from any hook.

   
  $tools->display_safe($string, $charset=false, $decode=false, $mailbox=false);
       
        Descritption:
            returns a safe version of $string by properly handling any HTML
            or mark up within it. All other arguments are optional. $charset
            is the charset of the string which will then be converted to
            UTF-8. $decode is a boolean that signifies that encoded email
            header entities may be present, and $mailbox is for special
            handling if the string is an IMAP mailbox name. Normal use for
            sanitizing display content only requires $string.
    
        Hook compatibility:
            Can be called from anywhere, but is normally called from a display
            hook or the print_ function of the page hook.


  $tools->add_js($string);

        Descritption:
            Puts the content of $string inside <script> tags in the head
            section of the page.

        Hook compatibility:
            Can be used from any work hook or the url_action function of the
            page hook


  $tools->save_setting($name, $value);

        Description:
            Save a user setting named $name with a value of $value. The setting
            is available right away and written to the users permanent settings.

        Hook compatibility:
            Intended to be used from work hooks or the url_action function of a
            page hook, but will work when called from any hook.


  $tools->get_setting($name);
      
        Description:
            returns the user's setting value for $name. If unfound returns false

        Hook compatibility:
            Can be run from any plugin function and any hook point.


  $tools->send_notice($string);
       
        Description: 
            Adds $string to the list of user notices to be displayed above the
            primary content area below the folder dropdown and the main menu.

        Hook compatibility:
            Should be run from the url_action function of a page hook or from
            work hooks

  $tools->get_mailbox();

        Descritption:
            Returns the currently selected mailbox, false if none is set.

        Hook compatibility:
            Can be run from any hook.


  $tools->set_mailbox($mailbox);

        Description:
            Sets the currently selected mailbox to $mailbox. Does not run
            select the mailbox in IMAP only sets it as the current mailbox
            for Hastymail.

        Hook compatibility:
            Should onlly be used from the url_action function of the page
            hook


  $tools->get_db();

        Description:
            This supplies a plugin with the ability to perform SQL commands on a configured
            database. This requires that Hastymail be configured to properly access a
            databse in the hastymail2.conf file. Hastymail uses a shared system in which
            the database connection can be used by plugins without each plugin having
            to authenticate to a server or setup it's own db connection.

        Hook compatibility:
            Can be used from any hook function. It is preferable to only use from work hooks
            or the url_action function of a page hook, but is available from any. Can be called
            once from the 'init' work hook making the db connection available for the rest of the
            plugin functions.


  $tools->db_insert($sql);

        Description:
            Inserts a row. $sql is a full valid SQL statement as a string. Returns the number of
            rows inserted. $tools->get_db(); must be run at some point by the plugin before this
            method can be used.

        Hook compatibility:
            Can be used anywhere but is intended to be used in work hooks or the url_action function
            of the page hook.


  $tools->db_delete($sql);

        Description:
            Deletes a row. $sql is a full valid SQL statement as a string. Returns the number of
            rows deleted. $tools->get_db(); must be run at some point by the plugin before this
            method can be used.

        Hook compatibility:
            Can be used anywhere but is intended to be used in work hooks or the url_action function
            of the page hook.


  $tools->db_update($sql);

        Description:
            Update a row. $sql is a full valid SQL statement as a string. Returns the number of
            rows updated. $tools->get_db(); must be run at some point by the plugin before this
            method can be used.

        Hook compatibility:
            Can be used anywhere but is intended to be used in work hooks or the url_action function
            of the page hook.


  $tools->db_query($sql);

        Description:
            Run a select statement.  $sql is a full valid SQL statement as a string. Returns an array
            of matching rows. or an empty array on error or no matches. When rows are returned they are in
            the format of:
            
            array(
                0 => array(
                    'filed_name' => 'value',
                    'field_name2' => 'value2',
                    ...
                ),
                1 => array(
                ...
                
            $tools->get_db(); must be run at some point by the plugin before this
            method can be used.

        Hook compatibility:
            Can be used anywhere but is intended to be used in work hooks or the url_action function
            of the page hook.


  $tools->db_quote($string);
    
        Description:
            Accepts a string input and returns it with double quotes and proper escaping for use
            in a a SQL query. $tools->get_db(); must be run at some point by the plugin before this
            method can be used.

        Hook compatibility:
            Can be used anywhere but is intended to be used in work hooks or the url_action function
            of the page hook. 


  $tools->db_puke();

        Description:
            dumps a bunch of information about the SLQ connection and transactions, including any
            sql errors and all SQL queries run up until that point. $tools->get_db(); must be run
            at some point by the plugin before this method can be used.

   
        Hook compatibility:
           Can be run from any hook but will only show debug information for SQL activity that occured
           in a prior hook.


  $tools->register_ajax_callback($function_name, $argument_count, $div_id=false);

        Description:
            Sets up an AJAX callback for the plugin to use. Using this method plugins can make AJAX
            calls to the server without reloading the page, and return chunks of XHTML to be inserted
            into the page. $function_name is the base name of the javascript and php functions that will
            be used, $argument_count is the number of arguments the javascript will pass to the corresponding
            php function, and $div_id is an optional arguement that if present will result in that div being
            replaced with the output of the AJAX callback.
        
            This feature requires the addition of a file called ajax.php that must have a function
            with the correct name. Please docs/plugin_ajax.txt for more information.

        Hook compatibility:
            This function MUST be run from the "init" work hook.


  $tools->imap_get_folders($force_update=false);

        Descritption:
            Returns a detailed array of the users folders and their properties. 
            If $force_update is set to true then the folder cache is refreshed
            with an IMAP LIST response.

        Hook compatibility
            Can be called from any work hook or the url_action function of
            the page hook.


  $tools->imap_get_capability();
    
        Descritption:
            Returns the IMAP capability response

        Hook compatibility:
            Can be called from any work hook or the url_action function of
            the page hook.


  $tools->imap_select_mailbox($mailbox, $sort_by, $unseen, $quick, $filter);

        Description:
            At the most basic this method runs an IMAP select on a mailbox.
            If the select response indicates a mailbox change this method
            can also automatically resort a mailbox and check for new messages.
            $mailbox is the folder to select. $sort_by is the sorting method
            in case the mailbox needs to be resorted. $unseen causes the method
            to run an IMAP UNSEEN query on the mailbox and to incorporate it's
            results into the folder information (which can be retrieved with the
            imap_get_folders() method. The $quick argument causes the method
            to only select the mailbox without resorting or running an unseen
            fetch. Finally $filter is any sort filter being applied to the IMAP
            sort if being run.

        Hook compatibility:
            Can be run from any work hook or the url_action function of
            the page hook.


  $tools->imap_sort_mailbox($mailbox, $sort_type, $filter);

        Description:
            Sort a folder with the IMAP SORT command. $mailbox is the folder
            to sort. $sort_type is the sort method (ARRIVAL, SUBJECT, etc).
            $filter is the SORT filter (ALL, UNREAD, FLAGGED, etc). This
            method does not need to be run directly in many cases, because
            the imap_select_mailbox() method will automatically sort the mailbox
            and refresh the cache when needed if desired.

        Hook compatibility:
            Can be run from any work hook or the url_action function of
            the page hook.


  $tools->imap_get_mailbox_uids($mailbox);
        
        Descritption:
            Returns the IMAP UIDS for the folder in $mailbox.

        Hook compatibility:
            Can be run from any work hook or the url_action function of
            the page hook.


  $tools->imap_get_header_list($mailbox, $uids);
    
        Descritption:
            Returns a list of message headers for the given UIDS.
            $mailbox is hte folder and $uids is an array of IMAP UIDS.

        Hook compatibility:
            Can be run from any work hook or the url_action function of
            the page hook.


  $tools-> get_message_headers($uids, $part);

        Description:
            returns an array of headers for the given IMAP message
            UID. If $part is 0 returns the primary message headers,
            otherwise returns any available headers for the specified
            part. the folder in which the message resides MUST be
            selected with imap_select_mailbox() before this can be run.

        Hook compatibility:
            Can be run from any work hook or the url_action function of
            the page hook.


  $tools->imap_move_messages($source_mailbox, $uids, $destination_mailbox);
    
        Description:
            Move messages from one folder to another. $uids is an array of
            message uids to move, $source_mailbox is the current mailbox, and
            $destination_mailbox is the folder to move the messages to.

        Hook compatibility:
            Can be run from any work hook or the url_action function of a page hook


  $tools->imap_copy_messages($source_mailbox, $uids, $destination_mailbox);

        Descritption:
            Copy messages from one folder to another. $uids is an array of
            message uids to move, $source_mailbox is the current mailbox, and
            $destination_mailbox is the folder to copy the messages to.

        Hook compatibility:
            Can be run from any work hook or the url_action function of a page hook


  $tools->imap_delete_messages($mailbox, $uids);

        Description:
            Delete messages from a folder. $uids is an array of message UIDs to
            delete, $mailbox is the folder name.

        Hook compatibility:
            Can be run from any work hook or the url_action function of a page hook


  $tools->imap_flag_messages($mailbox, $uids, $flag);

        Description:
            Used to set/unset message flags in IMAP. $mailbox is the folder the
            messages reside in, $uids is an array of message UIDS to flag, and flag
            can be one of the following: READ, UNREAD, FLAG or UNFLAG, 


        Hook compatibility:
            Can be run from any work hook or the url_action function of a page hook


  $tools->imap_expunge_mailbox($mailbox);

        Description:
            Expunges any messages with the deleted flag set in the given mailbox.

        Hook compatibility:
            Can be run from any work hook or the url_action function of a page hook

  $tools->merge_contacts_source($contacts);

        Description:
            Merges an array of contacts from an external source into the contact list
            for the compose page.

        Hook compatibility:
            Can only be run from the compose_contact_list work hook

  $tools->register_contacts_source($title,$source);

        Description:
            Sets up the display name and internal source lable used by contacts merged
            from an external source.

        Hook compatibility:
            Can only be run from the compose_contact_list work hook
